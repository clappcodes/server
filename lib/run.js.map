{
  "version": 3,
  "sources": ["../src/run.ts"],
  "sourcesContent": ["import { ChildProcess, spawn } from \"child_process\";\nimport { Readable } from \"stream\";\nimport { props } from \"./props\";\nimport { state } from \"./state\";\n\nexport { props, state };\nexport const proccess = state.proccess;\n\nfunction stripAnsiColors(text: string): string {\n\treturn text;\n\treturn text.replace(\n\t\t/[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n\t\t\"\"\n\t);\n}\n\nfunction redirectOutput(stream: Readable) {\n\tstream.on(\"data\", (data: any) => {\n\t\tdata\n\t\t\t.toString()\n\t\t\t.split(\"\\n\")\n\t\t\t.forEach((line: string) => {\n\t\t\t\tif (line !== \"\") {\n\t\t\t\t\tconsole.log(line);\n\t\t\t\t}\n\t\t\t});\n\t});\n}\n\nexport function server(force = false) {\n\tclearTimeout(state.tid);\n\t// @ts-ignore\n\tif (state.proccess && !state.proccess.__closed) {\n\t\tconsole.log(\"Process exists\");\n\t\tif (force) {\n\t\t\tconsole.log(\"KILL\", state.proccess.kill());\n\t\t\tstate.tid = setTimeout(() => server(true), 500);\n\t\t} else {\n\t\t\treturn state.proccess;\n\t\t}\n\t}\n\n\tconst child = spawn(props.cmdPath, [props.runFile], {\n\t\tcwd: props.proPath,\n\t\tenv: {\n\t\t\tCLAPP_SERVER_PROPS: JSON.stringify(props),\n\t\t\t/**\n\t\t\t * Starts the process as a normal Node.js process.\n\t\t\t * In this mode, you will be able to pass cli options to Node.js as you would when running the normal Node.js executable\n\t\t\t * @link https://www.electronjs.org/docs/latest/api/environment-variables#electron_run_as_node\n\t\t\t */\n\t\t\tELECTRON_RUN_AS_NODE: \"1\",\n\t\t\tCXA_SERVER_START: \"1\",\n\t\t},\n\t});\n\n\tstate.proccess = child;\n\tstate.tid = null;\n\n\tconsole.log(\"[run] success\", state.proccess.pid);\n\n\t// console.log('appProcess', appProcess)\n\t[child.stdout, child.stderr].forEach(redirectOutput);\n\n\tchild.on(\"error\", (error) => {\n\t\t// @ts-ignore\n\t\tchild.__closed = true;\n\t\tconsole.error(`[run] error: ${error.message}`);\n\t});\n\n\tchild.on(\"close\", (code) => {\n\t\t// @ts-ignore\n\t\tchild.__closed = true;\n\t\tconsole.log(`[run] child process exited with code ${code}`);\n\t});\n\n\treturn child;\n}\n\nexport const kill = (signal: number | NodeJS.Signals) =>\n\tstate.proccess.kill(signal);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAoC;AAEpC,mBAAsB;AACtB,mBAAsB;AAGf,MAAM,WAAW,mBAAM;AAE9B,SAAS,gBAAgB,MAAsB;AAC9C,SAAO;AACP,SAAO,KAAK;AAAA,IACX;AAAA,IACA;AAAA,EACD;AACD;AAEA,SAAS,eAAe,QAAkB;AACzC,SAAO,GAAG,QAAQ,CAAC,SAAc;AAChC,SACE,SAAS,EACT,MAAM,IAAI,EACV,QAAQ,CAAC,SAAiB;AAC1B,UAAI,SAAS,IAAI;AAChB,gBAAQ,IAAI,IAAI;AAAA,MACjB;AAAA,IACD,CAAC;AAAA,EACH,CAAC;AACF;AAEO,SAAS,OAAO,QAAQ,OAAO;AACrC,eAAa,mBAAM,GAAG;AAEtB,MAAI,mBAAM,YAAY,CAAC,mBAAM,SAAS,UAAU;AAC/C,YAAQ,IAAI,gBAAgB;AAC5B,QAAI,OAAO;AACV,cAAQ,IAAI,QAAQ,mBAAM,SAAS,KAAK,CAAC;AACzC,yBAAM,MAAM,WAAW,MAAM,OAAO,IAAI,GAAG,GAAG;AAAA,IAC/C,OAAO;AACN,aAAO,mBAAM;AAAA,IACd;AAAA,EACD;AAEA,QAAM,YAAQ,4BAAM,mBAAM,SAAS,CAAC,mBAAM,OAAO,GAAG;AAAA,IACnD,KAAK,mBAAM;AAAA,IACX,KAAK;AAAA,MACJ,oBAAoB,KAAK,UAAU,kBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMxC,sBAAsB;AAAA,MACtB,kBAAkB;AAAA,IACnB;AAAA,EACD,CAAC;AAED,qBAAM,WAAW;AACjB,qBAAM,MAAM;AAEZ,UAAQ,IAAI,iBAAiB,mBAAM,SAAS,GAAG;AAG/C,GAAC,MAAM,QAAQ,MAAM,MAAM,EAAE,QAAQ,cAAc;AAEnD,QAAM,GAAG,SAAS,CAAC,UAAU;AAE5B,UAAM,WAAW;AACjB,YAAQ,MAAM,gBAAgB,MAAM,OAAO,EAAE;AAAA,EAC9C,CAAC;AAED,QAAM,GAAG,SAAS,CAAC,SAAS;AAE3B,UAAM,WAAW;AACjB,YAAQ,IAAI,wCAAwC,IAAI,EAAE;AAAA,EAC3D,CAAC;AAED,SAAO;AACR;AAEO,MAAM,OAAO,CAAC,WACpB,mBAAM,SAAS,KAAK,MAAM;",
  "names": []
}
