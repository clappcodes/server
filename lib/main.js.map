{
  "version": 3,
  "sources": ["../src/main.ts", "../src/props.ts", "../src/app.ts", "../src/state.ts", "../src/run.ts"],
  "sourcesContent": ["export * from \"./props\";\nexport * as app from \"./app\";\nexport * as run from \"./run\";\nexport * as state from \"./state\";\n\n// startServer()\n// require(\"../../../app.dev/lib/server/run\").addModulePaths(self).spawnServer(true)\n", "import * as esbuild from \"esbuild\";\nimport * as path from \"path\";\n\nexport class Props {\n\t/**\n\t * ESBuild serve port\n\t */\n\tappPort = 1212;\n\t/**\n\t * Applications root dir\n\t */\n\tappRoot = \"/Applications\";\n\t/**\n\t * Application name\n\t */\n\tappName = \"Crawless28Nov.app\";\n\n\t/**\n\t * Source path\n\t */\n\t// @ts-ignore\n\tsrcPath = CLAPP_SRC_PATH; //process.env.PWD\n\n\tget appPath(): string {\n\t\treturn path.resolve(this.appRoot, this.appName);\n\t}\n\tget resPath(): string {\n\t\treturn path.resolve(this.appPath, \"Contents/Resources\");\n\t}\n\tget cmdPath(): string {\n\t\treturn path.resolve(this.appPath, \"Contents/MacOS/Crawless\");\n\t}\n\tget devPath(): string {\n\t\treturn path.resolve(this.resPath, \"app.dev\");\n\t}\n\tget libPath(): string {\n\t\treturn path.resolve(this.devPath, \"lib\"); // library files\n\t}\n\tget proPath(): string {\n\t\treturn path.resolve(this.devPath, \"pro\"); // project files\n\t}\n\tget runFile(): string {\n\t\treturn path.resolve(this.libPath, \"app.js\");\n\t}\n\n\tget build(): esbuild.BuildOptions {\n\t\treturn {\n\t\t\tentryPoints: [this.proFile(\"main.ts\"), this.libFile(\"main.ts\")],\n\t\t\tbundle: true,\n\t\t\tplatform: \"node\",\n\t\t\tcolor: true,\n\t\t\tlogLevel: \"debug\",\n\t\t\ttarget: [\"es2020\", \"node12\"],\n\t\t\toutdir: this.devPath,\n\t\t\texternal: [\"esbuild\"],\n\t\t};\n\t}\n\n\tget serve(): esbuild.ServeOptions {\n\t\treturn {\n\t\t\tport: this.appPort,\n\t\t\tservedir: this.devPath,\n\t\t};\n\t}\n\n\tconstructor(init = {}) {\n\t\tObject.assign(this, init);\n\t}\n\n\tsrcFile(file: string) {\n\t\treturn path.resolve(this.srcPath, file);\n\t}\n\n\tlibFile(file: string) {\n\t\treturn path.resolve(this.libPath, file);\n\t}\n\n\tproFile(file: string) {\n\t\treturn path.resolve(this.proPath, file);\n\t}\n}\n\nexport const props = new Props();\n", "import * as esbuild from 'esbuild'\nimport * as path from 'path'\nimport * as fs from 'fs'\nimport { props } from './props'\nimport { state } from './state'\n\nexport { props, state }\n\nexport function init(force = false) {\n  const { devPath, libPath, proPath, srcPath } = props\n\n  if (force || !fs.existsSync(props.devPath)) {\n    fs.mkdirSync(props.libPath, { recursive: true })\n    fs.mkdirSync(props.proPath, { recursive: true })\n\n    fs.writeFileSync(\n      path.resolve(props.devPath, 'index.html'),\n      `\n      <script>var _es = new EventSource('/esbuild').addEventListener('change', (e) => console.log(e.data))</script>\n      <h1>crawless (ext) app</h1><pre>${JSON.stringify(props, null, 2)}</pre>`,\n    )\n\n    // create empty entry points\n    fs.writeFileSync(props.libFile('main.ts'), ``)\n    fs.writeFileSync(props.proFile('main.ts'), ``)\n\n    console.log('[app] [init]', { devPath, libPath, proPath, srcPath })\n  }\n\n  console.log('[app] [paths]', { devPath, libPath, proPath, srcPath })\n\n  // copy app & run files\n  // fs.copyFileSync(props.srcFile('app.js'), props.libFile('app.js'))\n  // fs.copyFileSync(props.srcFile('run.js'), props.libFile('run.js'))\n\n  // console.log('[app] synced!', [\n  //   props.libFile('app.js'),\n  //   props.libFile('run.js'),\n  // ])\n}\n\nexport async function startServer() {\n  state.options = props.build\n  state.context = await esbuild.context(props.build)\n  await state.context.watch()\n  state.server = await state.context.serve(props.serve)\n\n  console.log(`[app] ${startServer.name}`, state)\n\n  return state\n}\n\nconsole.log('[app] ELECTRON_RUN_AS_NODE', process.env.ELECTRON_RUN_AS_NODE)\nconsole.log('[app] CXA_SERVER_START', process.env.CXA_SERVER_START)\nconsole.log('[app] CMD', process.execPath, ...process.execArgv)\n\nif (process.env.CXA_SERVER_START) {\n  startServer()\n  console.log('[app] PROCESS', process.pid)\n}\n", "import type { BuildContext, ServeResult, BuildOptions } from 'esbuild'\nimport type { ChildProcess } from 'child_process'\n\nexport module state {\n  export var options: BuildOptions\n  export var context: BuildContext\n  export var server: ServeResult\n  // @ts-ignore\n  export var proccess: ChildProcess = process.__cxa_server\n  export var tid: NodeJS.Timeout\n}\n", "import { spawn } from 'child_process'\nimport { Readable } from 'stream'\nimport { props } from './props'\nimport { state } from './state'\n\nexport { props, state }\n\nfunction stripAnsiColors(text: string): string {\n  return text\n  return text.replace(\n    /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n    '',\n  )\n}\n\nfunction redirectOutput(stream: Readable) {\n  stream.on('data', (data: any) => {\n    data\n      .toString()\n      .split('\\n')\n      .forEach((line: string) => {\n        if (line !== '') {\n          console.log(stripAnsiColors(line))\n        }\n      })\n  })\n}\n\nexport function spawnServer(force = false) {\n  clearTimeout(state.tid)\n\n  if (state.proccess) {\n    console.log('Process exists')\n    if (force) {\n      if (!state.proccess.killed) {\n        console.log('KILL', state.proccess.kill())\n        state.tid = setTimeout(() => spawnServer(true), 500)\n      }\n    } else return state.proccess\n  }\n\n  const appProcess = spawn(props.cmdPath, [props.runFile], {\n    env: {\n      /**\n       * Starts the process as a normal Node.js process.\n       * In this mode, you will be able to pass cli options to Node.js as you would when running the normal Node.js executable\n       * @link https://www.electronjs.org/docs/latest/api/environment-variables#electron_run_as_node\n       */\n      ELECTRON_RUN_AS_NODE: '1',\n      CXA_SERVER_START: '1',\n    },\n  })\n\n  state.proccess = appProcess\n  state.tid = null\n\n  console.log('[run] PROCESS', state)\n\n  // console.log('appProcess', appProcess)\n  ;[appProcess.stdout, appProcess.stderr].forEach(redirectOutput)\n\n  return appProcess\n}\n\nexport const kill = (signal: number | NodeJS.Signals) =>\n  state.proccess.kill(signal)\n\nexport const reload = (self: typeof globalThis, id: string) => {\n  try {\n    const resolved = self.require.resolve(id)\n    delete self.require.cache[resolved]\n    return self.require(id)\n  } catch (e) {\n    console.log('load error', e)\n  }\n}\n\nexport function addModulePaths(self: typeof globalThis) {\n  try {\n    // @ts-ignore\n    self.module.paths.push(process.resourcesPath)\n    self.module.paths.push(props.libPath)\n    self.module.paths.push(props.libFile('node_modules'))\n\n    return self.require('server/run')\n  } catch (e) {\n    console.log('addModulePaths/Error', e)\n  }\n}\n\nconsole.log('[run] CXA_SERVER_SPAWN', process.env.CXA_SERVER_SPAWN)\nconsole.log('[run] process', state.proccess)\n\n// if (process.env.CXA_SERVER_SPAWN) {\n//   spawnServer()\n// }\n"],
  "mappings": "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",
  "names": ["init", "path", "state"]
}
